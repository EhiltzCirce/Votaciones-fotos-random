---
import { getSession } from 'auth-astro/server'
import Actions from "@/components/Actions.astro"
import ShowMemes from '@/components/ShowMemes.astro'
import { Votes, db, eq, count } from 'astro:db'

const session = await getSession(Astro.request)

const votes = await db.select({ VoteId: Votes.voteId }).from(Votes).where(eq(Votes.userId, session.user.id))

const allVotes = await db
  .select({ VoteId: Votes.voteId, CategoryId: Votes.category, count: count() })
  .from(Votes)
  .groupBy(Votes.voteId, Votes.category)
  .where(eq(Votes.category, 'category-memes'))

const totalVotes = allVotes.reduce((acc, { count }) => acc + count, 0)

const sortedVotes = allVotes.sort((a, b) => b.count - a.count)

const topTwoVotes = sortedVotes.slice(0, 2)

console.log(topTwoVotes)

const userVotes = votes.map(vote => vote.VoteId)
---

<section class="flex justify-center flex-col items-center">
  <article class="mb-5 sm:mb-10 flex gap-5">
    <img src={session.user.image} alt=`Imagen del usuario ${session.user.name}` class="size-14 rounded-full">
    <div class="flex flex-col">
      <h1 class="text-2xl font-bold">{session.user.name }</h1>
      <button id="logout"> 
        <span class="text-red-400/70"> Cerrar Sesión </span>
      </button>
    </div>
  </article>

  <div class="mb-5 sm:mb-10 flex flex-col justify-center items-center">
    <h1 class="text-2xl font-bold uppercase text-center"> Meme del año </h1>

    <p class="text-gray-400/90 text-center text-xl" data-votes={userVotes}> Vota por tu meme favorito <br/>
        <span class="text-red-300/90"> Solo puedes votar 3 veces. </span>
    </p>
  </div>

  <ShowMemes classImage="saturate-0 hover:saturate-150 cursor-pointer" votes={userVotes} classPicture='image-container-vote'/>

  <div class="mt-5 md:mt-10 flex justify-center w-full items-center flex-col">
    <h2 class="text-3xl font-bold text-blue-300/90 text-center uppercase"> Pronóstico </h2>
    <small class="text-red-300/80 mb-5"> Basado en todos los votos por los usuarios </small>
      <div class="container-pronostic">
        {
          topTwoVotes.map(({ VoteId, count }) => {
            const porcentageCount = (count / totalVotes) * 100
            return (
              <div class="flex flex-col gap-2 items-center md:h-[300px]">
                <img src={`/img/Memes/${VoteId}.webp`} alt={`Meme ${VoteId}`} class="size-40 sm:size-full md:h-[250px] rounded-lg" />
                <p class="text-xl sm:text-3xl md:text-4xl font-bold font-Public text-accent">       
                  {porcentageCount.toFixed(2)} %
                </p>
              </div>
            )
          })
        }
        <div class="col-start-2 col-end-3 row-start-1 row-end-2 md:h-[300px]"> 
          <img src="/img/Vs-logo.webp" alt="Logo de enfrentamiento - VS" class="size-full" 
              style="filter: drop-shadow(0 0 0.75rem rgba(0, 0, 0, 0.3)); "
          />
        </div>
      </div>
  </div>
</section>

<style>
  .container-pronostic {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

</style>
<script>
  import { $ } from '@/lib/dom-selector'

  document.addEventListener('astro:page-load', async () => {
    const { signOut } = await import('auth-astro/client')
    const $logout = $('#logout')

    if ($logout) $logout.onclick = () => signOut()
  })
</script>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { toastAlert } from '@/function/alerts'

  document.addEventListener('astro:page-load', () => {
    const $images = $$('.image-container-vote') as NodeListOf<HTMLImageElement>
    const $votes = $('p[data-votes]') as HTMLParagraphElement

    const { votes } = $votes.dataset
    const userVotes = votes.split(',')
    
    $images.forEach(($image) => {
      $image.onclick = async () => {

        if (userVotes.includes($image.dataset.id)) {
          toastAlert({ title: 'Ya has votado por este meme', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
          return
        }

        if (userVotes.length >= 3) {
          toastAlert({ title: 'Ya has votado 3 veces', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
          return
        }

        const { url, id } = $image.dataset

        const category = `category-${url.split('/').at(-2).toLowerCase()}`

        const dataToSend = {
          voteId: id,
          category: category
        }
        
        const response = await fetch('/api/memes/votes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(dataToSend)
        })

        if (!response.ok) {
          toastAlert({ title: 'Error al votar', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
          return 
        } else {
          toastAlert({ title: 'Voto realizado', type: 'success', icon: true, dismissible: true, location: 'bottom-center' })

        }
      }
    })
  })
</script>