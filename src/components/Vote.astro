---
import { getSession } from 'auth-astro/server'
import Actions from "@/components/Actions.astro"
import ShowMemes from '@/components/ShowMemes.astro'
import { Votes, db, eq } from 'astro:db'

const session = await getSession(Astro.request)

const votes = await db.select({ VoteId: Votes.voteId }).from(Votes).where(eq(Votes.userId, session.user.id))

const userVotes = votes.map(vote => vote.VoteId)
---

<section class="flex justify-center flex-col items-center">
  <article class="mb-5 sm:mb-10 flex gap-5">
    <img src={session.user.image} alt="" class="size-14 rounded-full">
    <div class="flex flex-col">
      <h1 class="text-2xl font-bold">{session.user.name }</h1>
      <button id="logout"> 
        <span class="text-red-400/70"> Cerrar Sesión </span>
      </button>
    </div>
  </article>

  <div class="mb-5 sm:mb-10 flex flex-col justify-center items-center">
    <h1 class="text-2xl font-bold uppercase text-center"> Meme del año </h1>

    <p class="text-gray-400/90 text-center text-xl"> Vota por tu meme favorito <br/>
        <span class="text-red-300/90"> Solo puedes votar 3 veces. </span>
    </p>
  </div>

  <ShowMemes classImage="saturate-0 hover:saturate-100 cursor-pointer" votes={userVotes}/>
</section>

<script>
  import { $ } from '@/lib/dom-selector'

  document.addEventListener('astro:page-load', async () => {
    const { signOut } = await import('auth-astro/client')
    const $logout = $('#logout')

    if ($logout) $logout.onclick = () => signOut()
  })
</script>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { toastAlert } from '@/function/alerts'

  document.addEventListener('astro:page-load', () => {
    const $images = $$('.image-container-vote') as NodeListOf<HTMLImageElement>
    let index = 0

    $images.forEach(($image) => {
      $image.onclick = async () => {

        const countVotes = localStorage.getItem('countVotes')

        if (parseInt(countVotes) > 2) {
          toastAlert({ title: 'Ya has votado 3 veces', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
          return
        }

        const { url, id } = $image.dataset

        const category = `category-${url.split('/').at(-2).toLowerCase()}`

        const dataToSend = {
          voteId: id,
          category: category
        }
        
        const response = await fetch('/api/memes/votes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(dataToSend)
        })

        if (!response.ok) {
          toastAlert({ title: 'Error al votar', type: 'error', icon: true, dismissible: false, location: 'bottom-center' })
          console.log('Error')
          return 
        } else {
          index++
          localStorage.setItem('countVotes', index.toString())

          toastAlert({ title: 'Voto realizado', type: 'success', icon: true, dismissible: true, location: 'bottom-center' })
        }
      }
    })
  })
</script>