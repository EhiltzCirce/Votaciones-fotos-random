---
import { getSession } from 'auth-astro/server'
import Actions from "@/components/Actions.astro"
import ShowMemes from '@/components/ShowMemes.astro'
import ShowTeachers from '@/components/ShowTeachers.astro'
import ShowPronostic from '@/components/ShowPronostic.astro'
import { Votes, db, eq, count } from 'astro:db'

const session = await getSession(Astro.request)

const { image } = session.user

const votes = await db.select({ VoteId: Votes.voteId }).from(Votes).where(eq(Votes.userId, session.user.id))

const allVotes = await db
  .select({ VoteId: Votes.voteId, CategoryId: Votes.category, count: count() })
  .from(Votes)
  .groupBy(Votes.voteId, Votes.category)

const votesByTeachers = allVotes.filter((vote) => vote.CategoryId === 'category-teachers')
const votesByMemes = allVotes.filter((vote) => vote.CategoryId === 'category-memes')

const totalVotesByTeachers = votesByTeachers.reduce((acc, { count }) => acc + count, 0)
const totalVotesByMemes = votesByMemes.reduce((acc, { count }) => acc + count, 0)

const sortedVotesByTeachers = votesByTeachers.sort((a, b) => b.count - a.count)
const sortedVotesByMemes = votesByMemes.sort((a, b) => b.count - a.count)

const topTwoVotesByTeachers = sortedVotesByTeachers.slice(0, 2)
const topTwoVotesByMemes = sortedVotesByMemes.slice(0, 2)

const userVotes = votes.map(vote => vote.VoteId)
---

<section class="flex justify-center flex-col items-center">
  <article class="mb-5 sm:mb-10 flex gap-5">
    <img src={image} alt=`Imagen del usuario ${session.user.name}` class="size-14 rounded-full">
    <div class="flex flex-col">
      <h1 class="text-2xl font-bold">{session.user.name }</h1>
      <button id="logout"> 
        <span class="text-red-400/70"> Cerrar Sesión </span>
      </button>
    </div>
  </article>

  <div class="mb-5 sm:mb-10 flex flex-col justify-center items-center">
    <h1 class="text-2xl font-bold"> <span class="text-2xl font-Dancing text-blue-400/90"> Categoria: </span> Meme del año </h1>
    <p class="text-yellow-300/90 text-center text-xl" data-votes={userVotes}> Vota por tu meme favorito <br/>
        <span class="text-red-300/90"> Solo puedes votar 3 veces. </span>
    </p>
  </div>

  <ShowMemes classImage="saturate-0 hover:saturate-150 cursor-pointer" votes={userVotes} classPicture='image-container-vote'/>

  <ShowTeachers classReference='text-vote' classImage="saturate-0 hover:saturate-150 cursor-pointer" classTitle="Voto a" votes={userVotes} />

  <aside class="mt-5 md:mt-10 flex justify-center items-center flex-col">
    <h2 class="text-3xl font-bold text-blue-300/90 text-center uppercase"> Pronósticos </h2>
    <small class="text-red-300/80 mb-5"> Basado en todos los votos por los usuarios </small>
  </aside>

  <ShowPronostic arrayPronostic={topTwoVotesByMemes} totalVotes={totalVotesByMemes} />
  <ShowPronostic arrayPronostic={topTwoVotesByTeachers} totalVotes={totalVotesByTeachers} />
</section>

<style>
  .container-pronostic {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

</style>
<script>
  import { $ } from '@/lib/dom-selector'

  document.addEventListener('astro:page-load', async () => {
    const { signOut } = await import('auth-astro/client')
    const $logout = $('#logout')

    if ($logout) $logout.onclick = () => signOut()
  })
</script>

<script>
  import { $, $$ } from '@/lib/dom-selector'
  import { sendVote } from '@/const/sendVote'

  document.addEventListener('astro:page-load', () => {
    const $images = $$('.image-container-vote') as NodeListOf<HTMLImageElement>
    const $teachers = $$('.text-vote') as NodeListOf<HTMLImageElement>

    if (!$images) return
    if (!$teachers) return

    sendVote($images)
    sendVote($teachers)
  })
</script>